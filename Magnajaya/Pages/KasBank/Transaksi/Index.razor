@page "/KasBank/Transaksi"


@using Magnajaya.Data
@using  Magnajaya.Services.Kasbank
@using Magnajaya.Pages.KasBank.SetupBank
@using Magnajaya.Pages.KasBank.Transaksi
@inject IJSRuntime jsRuntime
@inject ITransDetailService service
@inject IKasbankService servicebank
@inject ISourceCodeService servicecode


<h1>Transaksi</h1>

@if (toDoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Dokumen</th>
                <th>Tanggal</th>
                <th>Bank</th>
                <th>Keterangan</th>
                <th>Jumlah</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var toDoItem in toDoList)
            {
                <tr>

                    <td>@toDoItem.Docno</td>
                    <td>@toDoItem.Tanggal</td>
                    <td>@toDoItem.NamaBank(toBankList)</td>
                    <td>@toDoItem.Keterangan</td>
                    <td>@toDoItem.Saldo.ToString("##,#.##")</td>


                    <td><input type="button" class="btn btn-primary" value="Edit" @onclick="(() => PrepareForEdit(toDoItem))" data-toggle="modal" data-target="#taskModal" /></td>
                    <td><input type="button" class="btn btn-danger" value="Delete" @onclick="(() => PrepareForDelete(toDoItem))" data-toggle="modal" data-target="#confirmDeleteModal" /></td>
                </tr>
            }
        </tbody>
    </table>
}
<div>
    <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Add Code" @onclick="(() => InitializeTaskObject())" />
</div>

<TransDetail TaskObject=taskObject TaskGroup=toSrcList TaskBank="toBankList" IsDisabled="@isDisabled" DataChanged="@DataChanged">
    <CustomHeader>@CustomHeader</CustomHeader>
</TransDetail>

<ConfirmDialog OnClick="@Delete"></ConfirmDialog>


@code {
    List<CbTransH> toDoList;
    List<CbSrccd> toSrcList;
    List<CbBank> toBankList;


    CbSrccd taskSrc = new CbSrccd();

    CbTransH taskObject = new CbTransH();

    string CustomHeader;
    bool isDisabled;


    protected override async Task OnInitializedAsync()
    {
        toDoList = await service.Get();
        toSrcList = await servicecode.Get();
        toBankList = await servicebank.Get();
    }

    private void InitializeTaskObject()
    {
        taskObject = new CbTransH();
        taskObject.Tanggal = DateTime.Now;
        CustomHeader = "Add New Transaksi";
        isDisabled = true;
    }

    private async void DataChanged()
    {
        toDoList = await service.Get();
        StateHasChanged();
    }

    private void PrepareForEdit(CbTransH task)
    {
        taskObject = task;
        CustomHeader = "Edit Transaksi";
        isDisabled = true;
    }

    private void PrepareForDelete(CbTransH task)
    {
        taskObject = task;

    }

    private async Task Delete()
    {

        var task = await service.Delete(taskObject.CbTransHId);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        toDoList = await service.Get();
        taskObject = new CbTransH();

    }
}